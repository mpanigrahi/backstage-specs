apiVersion: v1
kind: Service
metadata: 
  name: {{ .Values.app.name }}
  namespace: {{ .Values.Namespace }}
  labels:
    app: {{ .Values.app.name }}
    tier: {{ .Values.tier }}
spec: 
  type: {{ .Values.service.type }}
  selector: 
    app: {{ .Values.app.name }}
  ports: 
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
    
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.Namespace }}
  labels:
    app: {{ .Values.app.name }}
    tier: {{ .Values.tier}}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ .Values.app.name }}
  updateStrategy:
    type: RollingUpdate  
  selector: 
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata: 
      annotations:
        linkerd.io/inject: enabled    
      name: {{ .Values.app.name }}
      labels:
        app: {{ .Values.app.name }}
        tier: {{ .Values.tier }}
    spec:
      securityContext:
        fsGroup: 1001
        sysctls: []    
      containers: 
        - name: {{ .Values.app.name }}-container
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          ports: 
            - containerPort: {{ .Values.image.containerPort }}
          env:
            - name: NODE_ENV
              value: "qa"  
            - name: PORT
              value: "3001"
            - name: DB_URI
              value: "mongodb://root:pa$$word@localhost:27017"
            - name: KAFKA_BROKERS
              value: "kafka-0.kafka-headless.rdx-events-kafka.svc.cluster.local:9092,kafka-1.kafka-headless.rdx-events-kafka.svc.cluster.local:9092,kafka-2.kafka-headless.rdx-events-kafka.svc.cluster.local:9092"
            - name: CONSUMER_GLOBAL_PRICE_TOPIC
              value: "consumer.rdx.rawmaterial.gobal.pricing"
            - name: PRODUCER_US_PRICE_TOPIC
              value: "consumer.rdx.rawmaterial.us.pricing" 
            - name: PRODUCER_CONVERSION_FACTORS_TOPIC
              value: "consumer.rdx.uom.conversion.factors" 
            - name: CURRENCY_API_KEY
              value: "IZu1F2FJvGBrA6Q8teSJQMlC919XYNDQGdeqbWPv" 
            - name: CONSUMER_GROUP_ID
              value: "rdx-consumer-uom-api" 
        - name: mongodb
          image: taww-docker.artifactrepo.jnj.com/bitnami/mongodb:4.4.12-debian-10-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              value: "pa$$word"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath:
      imagePullSecrets:
        - name: {{ .Values.imgPullSecret }} 
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"    
